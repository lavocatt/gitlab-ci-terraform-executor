name: 'Terraform'

on:
  push:
    branches:
      - main
      - stable
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-20.04
    env:
      ACTIONS_VARS: github_actions.auto.tfvars
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:

      - name: Set Terraform workspace
        run: |
          #!/bin/bash
          set -euxo pipefail

          # Assume staging by default.
          export TF_WORKSPACE=staging

          # Deploy to stable for pushed to stable (when PR is merged).
          if [[ $GITHUB_REF =~ stable$ ]]; then
            export TF_WORKSPACE=stable
          fi

          # Run plan against stable if this PR is targeted for stable.
          # NOTE(mhayden): GITHUB_BASE_REF is empty if not a PR.
          if [[ "${GITHUB_BASE_REF:-}" == stable ]]; then
            export TF_WORKSPACE=stable
          fi

          echo "TF_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 0.14.7

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply (staging)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Terraform Apply (stable)
        if: github.ref == 'refs/heads/stable' && github.event_name == 'push'
        run: terraform apply -auto-approve
